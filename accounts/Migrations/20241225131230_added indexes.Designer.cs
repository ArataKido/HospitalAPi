// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Accounts.Context;

#nullable disable

namespace Accounts.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20241225131230_added indexes")]
    partial class addedindexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("accounts.Entity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_accounts_full_name");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_user_name");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("accounts.Entity.AccountRole", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("AccountId", "RoleId")
                        .HasName("pk_account_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_account_roles_role_id");

                    b.ToTable("account_roles", (string)null);
                });

            modelBuilder.Entity("accounts.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("accounts.Entity.AccountRole", b =>
                {
                    b.HasOne("accounts.Entity.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_roles_accounts_account_id");

                    b.HasOne("accounts.Entity.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_roles_roles_role_id");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("accounts.Entity.Account", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("accounts.Entity.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
